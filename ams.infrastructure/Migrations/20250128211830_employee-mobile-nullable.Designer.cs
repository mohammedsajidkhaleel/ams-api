// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ams.infrastructure;

#nullable disable

namespace ams.infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250128211830_employee-mobile-nullable")]
    partial class employeemobilenullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ams.domain.Accessories.Accessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_accessories");

                    b.ToTable("accessories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("129f3a50-9939-44d2-a12d-b6dd8c434e89"),
                            IsDeleted = false,
                            Name = "Laptop Bag"
                        },
                        new
                        {
                            Id = new Guid("3b2af4e0-6ea6-474e-9d5a-aa488f855a64"),
                            IsDeleted = false,
                            Name = "Wireless KB/M"
                        },
                        new
                        {
                            Id = new Guid("701a9764-9392-42e6-9bae-a0b71904c0d9"),
                            IsDeleted = false,
                            Name = "Headset"
                        },
                        new
                        {
                            Id = new Guid("c544dd6a-75f8-4148-9ff7-9d480684ca67"),
                            IsDeleted = false,
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = new Guid("f266170a-b637-4119-b417-9b9c754a3c45"),
                            IsDeleted = false,
                            Name = "Webcam"
                        },
                        new
                        {
                            Id = new Guid("f87a1e53-63f3-4586-a809-06731431bc07"),
                            IsDeleted = false,
                            Name = "Docking Station"
                        },
                        new
                        {
                            Id = new Guid("e9f09312-4a09-4e26-abfb-7c9453cb4d28"),
                            IsDeleted = false,
                            Name = "External Hard Drive/SSD "
                        },
                        new
                        {
                            Id = new Guid("624b4b3a-0e18-4969-b939-a1fca8b26d51"),
                            IsDeleted = false,
                            Name = "Keyboard"
                        },
                        new
                        {
                            Id = new Guid("e50d5693-a711-4184-97f9-436bc76f0420"),
                            IsDeleted = false,
                            Name = "USB Hub"
                        },
                        new
                        {
                            Id = new Guid("f23bcb62-63bd-4ae9-ac8f-432871f8ae54"),
                            IsDeleted = false,
                            Name = "Screen Protector"
                        },
                        new
                        {
                            Id = new Guid("df1d9565-21f9-44bc-9a75-9635d4c82c4e"),
                            IsDeleted = false,
                            Name = "Cable Management Accessories"
                        },
                        new
                        {
                            Id = new Guid("40dd02ed-29eb-423c-b7d7-dd96d035692e"),
                            IsDeleted = false,
                            Name = "Surge Protector/Power Strip "
                        },
                        new
                        {
                            Id = new Guid("19105bc4-0783-48c5-8736-e1e3b85b3781"),
                            IsDeleted = false,
                            Name = "Laptop Stand"
                        },
                        new
                        {
                            Id = new Guid("e3414d50-27e8-43dd-b0d6-9d655c2603c3"),
                            IsDeleted = false,
                            Name = "Cleaning Kits"
                        },
                        new
                        {
                            Id = new Guid("071f7121-0f58-4c31-8152-1bd37a1be208"),
                            IsDeleted = false,
                            Name = "Laptop Sleeve"
                        },
                        new
                        {
                            Id = new Guid("a5b2a115-71e0-41c9-91d6-8b6c06ab351b"),
                            IsDeleted = false,
                            Name = "Backpack"
                        },
                        new
                        {
                            Id = new Guid("f3a32464-31f6-4aba-a06f-34da057383ff"),
                            IsDeleted = false,
                            Name = "USB Dongle"
                        },
                        new
                        {
                            Id = new Guid("74941def-6a9b-4067-9f0a-891d47d9b098"),
                            IsDeleted = false,
                            Name = "Wireless Keyboard and Mouse"
                        });
                });

            modelBuilder.Entity("ams.domain.Assets.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_to");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("po_number");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("serial_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_assets");

                    b.HasIndex("AssignedTo")
                        .HasDatabaseName("ix_assets_assigned_to");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_assets_item_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_assets_project_id");

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("ams.domain.EmployeeAccessories.EmployeeAccessory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccessoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("accessory_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_employee_accessories");

                    b.HasIndex("AccessoryId")
                        .HasDatabaseName("ix_employee_accessories_accessory_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ix_employee_accessories_employee_id");

                    b.ToTable("employee_accessories", (string)null);
                });

            modelBuilder.Entity("ams.domain.Employees.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentDepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_department_id");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("ParentDepartmentId")
                        .HasDatabaseName("ix_departments_parent_department_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("ams.domain.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<DateOnly?>("DOJ")
                        .HasColumnType("date")
                        .HasColumnName("doj");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid?>("EmployeeCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_category_id");

                    b.Property<Guid?>("EmployeePositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_position_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Mobile")
                        .HasColumnType("text")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<Guid?>("NationalityId")
                        .HasColumnType("uuid")
                        .HasColumnName("nationality_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid?>("SponsorId")
                        .HasColumnType("uuid")
                        .HasColumnName("sponsor_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_employees_department_id");

                    b.HasIndex("EmployeeCategoryId")
                        .HasDatabaseName("ix_employees_employee_category_id");

                    b.HasIndex("EmployeePositionId")
                        .HasDatabaseName("ix_employees_employee_position_id");

                    b.HasIndex("NationalityId")
                        .HasDatabaseName("ix_employees_nationality_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_employees_project_id");

                    b.HasIndex("SponsorId")
                        .HasDatabaseName("ix_employees_sponsor_id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("ams.domain.Employees.EmployeeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_employee_categories");

                    b.ToTable("employee_categories", (string)null);
                });

            modelBuilder.Entity("ams.domain.Employees.EmployeePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_employee_positions");

                    b.ToTable("employee_positions", (string)null);
                });

            modelBuilder.Entity("ams.domain.Employees.Nationality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_nationalities");

                    b.ToTable("nationalities", (string)null);
                });

            modelBuilder.Entity("ams.domain.Employees.Sponsor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sponsors");

                    b.ToTable("sponsors", (string)null);
                });

            modelBuilder.Entity("ams.domain.ItemReceipts.ItemReceipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemReceiptNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_receipt_number");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("po_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_item_receipts");

                    b.HasIndex("ItemReceiptNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_item_receipts_item_receipt_number");

                    b.ToTable("item_receipts", (string)null);
                });

            modelBuilder.Entity("ams.domain.ItemReceipts.ItemReceiptDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<Guid>("ItemReceiptId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_receipt_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_item_receipt_details");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_item_receipt_details_item_id");

                    b.HasIndex("ItemReceiptId")
                        .HasDatabaseName("ix_item_receipt_details_item_receipt_id");

                    b.ToTable("item_receipt_details", (string)null);
                });

            modelBuilder.Entity("ams.domain.ItemReceipts.ItemReceiptItemSerialNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("ItemReceiptDetailId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_receipt_detail_id");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.HasKey("Id")
                        .HasName("pk_item_receipt_item_serial_numbers");

                    b.HasIndex("ItemReceiptDetailId")
                        .HasDatabaseName("ix_item_receipt_item_serial_numbers_item_receipt_detail_id");

                    b.ToTable("item_receipt_item_serial_numbers", (string)null);
                });

            modelBuilder.Entity("ams.domain.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("ItemCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("ItemCategoryId")
                        .HasDatabaseName("ix_items_item_category_id");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("ams.domain.Items.ItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentItemCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_item_category_id");

                    b.HasKey("Id")
                        .HasName("pk_item_categories");

                    b.HasIndex("ParentItemCategoryId")
                        .HasDatabaseName("ix_item_categories_parent_item_category_id");

                    b.ToTable("item_categories", (string)null);
                });

            modelBuilder.Entity("ams.domain.LicensedAssets.LicensedAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("license_id");

                    b.HasKey("Id")
                        .HasName("pk_licensed_assets");

                    b.ToTable("licensed_assets", (string)null);
                });

            modelBuilder.Entity("ams.domain.LicensedEmployees.LicensedEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LicenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("license_id");

                    b.HasKey("Id")
                        .HasName("pk_licensed_employees");

                    b.ToTable("licensed_employees", (string)null);
                });

            modelBuilder.Entity("ams.domain.Licenses.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("PONumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("po_number");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateOnly?>("PurchasedDate")
                        .HasColumnType("date")
                        .HasColumnName("purchased_date");

                    b.Property<int>("TotalLicenses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_licenses");

                    b.HasKey("Id")
                        .HasName("pk_licenses");

                    b.ToTable("licenses", (string)null);
                });

            modelBuilder.Entity("ams.domain.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("ams.domain.Sims.MobilePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.HasKey("Id")
                        .HasName("pk_mobile_plans");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_mobile_plans_name");

                    b.ToTable("mobile_plans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3aa1a0a0-4178-47b1-8200-ab1a238c0274"),
                            IsDeleted = false,
                            Name = "50",
                            OrderIndex = 1
                        },
                        new
                        {
                            Id = new Guid("166fbe6a-ad4a-4d13-99dc-f86155aa14c7"),
                            IsDeleted = false,
                            Name = "80",
                            OrderIndex = 2
                        },
                        new
                        {
                            Id = new Guid("73450b9a-575d-4eb4-b2c4-3400d3f623b1"),
                            IsDeleted = false,
                            Name = "120",
                            OrderIndex = 3
                        },
                        new
                        {
                            Id = new Guid("d298bb26-6c1f-46cb-a675-aa29d08e23bf"),
                            IsDeleted = false,
                            Name = "230",
                            OrderIndex = 4
                        },
                        new
                        {
                            Id = new Guid("cae99f89-1296-4b32-827e-6b836f2187fa"),
                            IsDeleted = false,
                            Name = "450",
                            OrderIndex = 5
                        },
                        new
                        {
                            Id = new Guid("5677a4d2-d209-403e-b1f0-71a838c5ced3"),
                            IsDeleted = false,
                            Name = "800",
                            OrderIndex = 6
                        });
                });

            modelBuilder.Entity("ams.domain.Sims.Sim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AssignedPlan")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_plan");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_to");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("Imei1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imei1");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_date_time");

                    b.Property<string>("ServiceAccount")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("service_account");

                    b.Property<string>("ServiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("service_number");

                    b.Property<string>("SimCardNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sim_card_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_sims");

                    b.HasIndex("AssignedTo")
                        .HasDatabaseName("ix_sims_assigned_to");

                    b.ToTable("sims", (string)null);
                });

            modelBuilder.Entity("ams.domain.Assets.Asset", b =>
                {
                    b.HasOne("ams.domain.Employees.Employee", null)
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("fk_assets_employee_assigned_to");

                    b.HasOne("ams.domain.Items.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk_assets_item_item_id");

                    b.HasOne("ams.domain.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_assets_project_project_id");
                });

            modelBuilder.Entity("ams.domain.EmployeeAccessories.EmployeeAccessory", b =>
                {
                    b.HasOne("ams.domain.Accessories.Accessory", null)
                        .WithMany()
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_accessories_accessories_accessory_id");

                    b.HasOne("ams.domain.Employees.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_accessories_employee_employee_id");
                });

            modelBuilder.Entity("ams.domain.Employees.Department", b =>
                {
                    b.HasOne("ams.domain.Employees.Department", null)
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId")
                        .HasConstraintName("fk_departments_departments_parent_department_id");
                });

            modelBuilder.Entity("ams.domain.Employees.Employee", b =>
                {
                    b.HasOne("ams.domain.Employees.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_employees_departments_department_id");

                    b.HasOne("ams.domain.Employees.EmployeeCategory", null)
                        .WithMany()
                        .HasForeignKey("EmployeeCategoryId")
                        .HasConstraintName("fk_employees_employee_categories_employee_category_id");

                    b.HasOne("ams.domain.Employees.EmployeePosition", null)
                        .WithMany()
                        .HasForeignKey("EmployeePositionId")
                        .HasConstraintName("fk_employees_employee_position_employee_position_id");

                    b.HasOne("ams.domain.Employees.Nationality", null)
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .HasConstraintName("fk_employees_nationality_nationality_id");

                    b.HasOne("ams.domain.Projects.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_employees_project_project_id");

                    b.HasOne("ams.domain.Employees.Sponsor", null)
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .HasConstraintName("fk_employees_sponsor_sponsor_id");
                });

            modelBuilder.Entity("ams.domain.ItemReceipts.ItemReceiptDetail", b =>
                {
                    b.HasOne("ams.domain.Items.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_receipt_details_items_item_id");

                    b.HasOne("ams.domain.ItemReceipts.ItemReceipt", "ItemReceipt")
                        .WithMany("Details")
                        .HasForeignKey("ItemReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_receipt_details_item_receipts_item_receipt_id");

                    b.Navigation("ItemReceipt");
                });

            modelBuilder.Entity("ams.domain.ItemReceipts.ItemReceiptItemSerialNumber", b =>
                {
                    b.HasOne("ams.domain.ItemReceipts.ItemReceiptDetail", "ItemReceiptDetail")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("ItemReceiptDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_receipt_item_serial_numbers_item_receipt_details_item_");

                    b.Navigation("ItemReceiptDetail");
                });

            modelBuilder.Entity("ams.domain.Items.Item", b =>
                {
                    b.HasOne("ams.domain.Items.ItemCategory", null)
                        .WithMany()
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_item_categories_item_category_id");
                });

            modelBuilder.Entity("ams.domain.Items.ItemCategory", b =>
                {
                    b.HasOne("ams.domain.Items.ItemCategory", null)
                        .WithMany()
                        .HasForeignKey("ParentItemCategoryId")
                        .HasConstraintName("fk_item_categories_item_categories_parent_item_category_id");
                });

            modelBuilder.Entity("ams.domain.Sims.Sim", b =>
                {
                    b.HasOne("ams.domain.Employees.Employee", null)
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("fk_sims_employees_assigned_to");
                });

            modelBuilder.Entity("ams.domain.ItemReceipts.ItemReceipt", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("ams.domain.ItemReceipts.ItemReceiptDetail", b =>
                {
                    b.Navigation("SerialNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
